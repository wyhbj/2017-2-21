粗略版的面向对象  ->  构造函数 -> 工厂方式
	function Teacher(name,age){
		var obj = {}; //原材料
		obj.name = name;
		obj.age = age; //加工
		obj.say = function(){
			alert(this.name);
		}
		
		return obj; //出厂
	}
	
	var t1 = new Teacher('nizp',18);
	//console.log(t1);
	t1.say();
	属性：名字前是有主的
	变量:变量名前面没有主的
	非空对象上才能加属性或者方法。
	函数:名前面没有主的
	方法:名字前是有主的
	var arr = [1,2,3];
	function fn(){ //函数
		alert(this);
	}
	
	arr.fn = function(){ //方法
		alert(this);
	}
	
	arr.fn();
	fn();
	new 为运算符
	专门用来运算函数的(相当于把一个函数调用了)
	new 函数之后的返回值就变成了对象。
	1.相当于在函数内部创建了一个对象，并且返回这个对象
	2.如果没有return默认返回这个对象，如果有return，后面跟着是个对象，那么函数名+() = return 后面的对象，如果不是对象，那么依然返回对象。
	3.里面的变量就要变成对象的属性，函数就要改成这个对象上的方法。
	function Teacher(name,age){
		//var obj = {}; //原材料
		this.name = name;
		this.age = age; //加工
		this.say = function(){
			alert(this.name);
		}
		//return {'job':'前端'};
		return '123456';
		//return obj; //出厂
	}
	
	var t1 = new Teacher('nizp',18);//实例化对象（过程）
	console.log(t1);
	//t1.say();
	new运算前和运算后 
	函数名后的()是用来传参用的。
	如果不传参()可以省略。
	类:
		-> 函数 - 这个函数就返回一个对象 -> 构造函数
		
	new：
		-> return后面写对象，返回值就是写的这个对象
			 return后面跟的不是对象，返回值就是构造函数这个对象。
			 尽量把变量变成属性，把函数变成方法。
			 在不传参的情况下，可以不用加括号 new + 函数名即可调用这个函数。
			 构造函数内的this指向了这个构造函数（就是这个对象）。
		
	没有new
		-> return后面写什么，返回值就是什么。
			必须函数名 + 括号才能调用这个函数
			   
	行业的潜规则：
		如果某个函数为构造函数，那么函数名的首字母要大写。